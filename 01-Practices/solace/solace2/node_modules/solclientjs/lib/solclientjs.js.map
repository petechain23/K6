{"version":3,"file":"solclient.js","mappings":"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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message-tracing/api.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/baggage.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-outcomes.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/provision-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"util\"","webpack://solclientjs/external node-commonjs \"worker_threads\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/fflate/lib/node.cjs","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nconst BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\nconst hasBlob = typeof Blob !== 'undefined';\n\nif (hasBlob) BINARY_TYPES.push('blob');\n\nmodule.exports = {\n  BINARY_TYPES,\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  hasBlob,\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\nconst DEFER_EVENT = 6;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._allowSynchronousEvents =\n      options.allowSynchronousEvents !== undefined\n        ? options.allowSynchronousEvents\n        : true;\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._errored = false;\n    this._loop = false;\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64(cb);\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData(cb);\n          break;\n        case INFLATING:\n        case DEFER_EVENT:\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    if (!this._errored) cb();\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getInfo(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      const error = this.createError(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n\n      cb(error);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      const error = this.createError(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (!this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        const error = this.createError(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        const error = this.createError(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    } else {\n      const error = this.createError(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        const error = this.createError(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n\n        cb(error);\n        return;\n      }\n    } else if (this._masked) {\n      const error = this.createError(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength16(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength64(cb) {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      const error = this.createError(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  haveLength(cb) {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        const error = this.createError(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data, cb);\n      return;\n    }\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    this.dataMessage(cb);\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(\n            RangeError,\n            'Max payload size exceeded',\n            false,\n            1009,\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._fragments.push(buf);\n      }\n\n      this.dataMessage(cb);\n      if (this._state === GET_INFO) this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  dataMessage(cb) {\n    if (!this._fin) {\n      this._state = GET_INFO;\n      return;\n    }\n\n    const messageLength = this._messageLength;\n    const fragments = this._fragments;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragmented = 0;\n    this._fragments = [];\n\n    if (this._opcode === 2) {\n      let data;\n\n      if (this._binaryType === 'nodebuffer') {\n        data = concat(fragments, messageLength);\n      } else if (this._binaryType === 'arraybuffer') {\n        data = toArrayBuffer(concat(fragments, messageLength));\n      } else if (this._binaryType === 'blob') {\n        data = new Blob(fragments);\n      } else {\n        data = fragments;\n      }\n\n      if (this._allowSynchronousEvents) {\n        this.emit('message', data, true);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    } else {\n      const buf = concat(fragments, messageLength);\n\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n        const error = this.createError(\n          Error,\n          'invalid UTF-8 sequence',\n          true,\n          1007,\n          'WS_ERR_INVALID_UTF8'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', buf, false);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data, cb) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          const error = this.createError(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n\n          cb(error);\n          return;\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._loop = false;\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n\n      this._state = GET_INFO;\n      return;\n    }\n\n    if (this._allowSynchronousEvents) {\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n      this._state = GET_INFO;\n    } else {\n      this._state = DEFER_EVENT;\n      setImmediate(() => {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n        this.startLoop(cb);\n      });\n    }\n  }\n\n  /**\n   * Builds an error object.\n   *\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n   * @param {String} message The error message\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n   *     `message`\n   * @param {Number} statusCode The status code\n   * @param {String} errorCode The exposed error code\n   * @return {(Error|RangeError)} The error\n   * @private\n   */\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n    this._loop = false;\n    this._errored = true;\n\n    const err = new ErrorCtor(\n      prefix ? `Invalid WebSocket frame: ${message}` : message\n    );\n\n    Error.captureStackTrace(err, this.createError);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n  }\n}\n\nmodule.exports = Receiver;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n'use strict';\n\nconst { Duplex } = require('stream');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER, kWebSocket, NOOP } = require('./constants');\nconst { isBlob, isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\nconst RANDOM_POOL_SIZE = 8 * 1024;\nlet randomPool;\nlet randomPoolPointer = RANDOM_POOL_SIZE;\n\nconst DEFAULT = 0;\nconst DEFLATING = 1;\nconst GET_BLOB_DATA = 2;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {Duplex} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._queue = [];\n    this._state = DEFAULT;\n    this.onerror = NOOP;\n    this[kWebSocket] = undefined;\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        if (randomPoolPointer === RANDOM_POOL_SIZE) {\n          /* istanbul ignore else  */\n          if (randomPool === undefined) {\n            //\n            // This is lazily initialized because server-sent frames must not\n            // be masked so it may never be used.\n            //\n            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n          }\n\n          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n          randomPoolPointer = 0;\n        }\n\n        mask[0] = randomPool[randomPoolPointer++];\n        mask[1] = randomPool[randomPoolPointer++];\n        mask[2] = randomPool[randomPoolPointer++];\n        mask[3] = randomPool[randomPoolPointer++];\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    const opts = {\n      [kByteLength]: byteLength,\n      fin: options.fin,\n      generateMask: this._generateMask,\n      mask: options.mask,\n      maskBuffer: this._maskBuffer,\n      opcode,\n      readOnly,\n      rsv1\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\n      } else {\n        this.getBlobData(data, this._compress, opts, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n    } else {\n      this.dispatch(data, this._compress, opts, cb);\n    }\n  }\n\n  /**\n   * Gets the contents of a blob as binary data.\n   *\n   * @param {Blob} blob The blob\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     the data\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  getBlobData(blob, compress, options, cb) {\n    this._bufferedBytes += options[kByteLength];\n    this._state = GET_BLOB_DATA;\n\n    blob\n      .arrayBuffer()\n      .then((arrayBuffer) => {\n        if (this._socket.destroyed) {\n          const err = new Error(\n            'The socket was closed while the blob was being read'\n          );\n\n          //\n          // `callCallbacks` is called in the next tick to ensure that errors\n          // that might be thrown in the callbacks behave like errors thrown\n          // outside the promise chain.\n          //\n          process.nextTick(callCallbacks, this, err, cb);\n          return;\n        }\n\n        this._bufferedBytes -= options[kByteLength];\n        const data = toBuffer(arrayBuffer);\n\n        if (!compress) {\n          this._state = DEFAULT;\n          this.sendFrame(Sender.frame(data, options), cb);\n          this.dequeue();\n        } else {\n          this.dispatch(data, compress, options, cb);\n        }\n      })\n      .catch((err) => {\n        //\n        // `onError` is called in the next tick for the same reason that\n        // `callCallbacks` above is.\n        //\n        process.nextTick(onError, this, err, cb);\n      });\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._state = DEFLATING;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        callCallbacks(this, err, cb);\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._state = DEFAULT;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (this._state === DEFAULT && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Calls queued callbacks with an error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error to call the callbacks with\n * @param {Function} [cb] The first callback\n * @private\n */\nfunction callCallbacks(sender, err, cb) {\n  if (typeof cb === 'function') cb(err);\n\n  for (let i = 0; i < sender._queue.length; i++) {\n    const params = sender._queue[i];\n    const callback = params[params.length - 1];\n\n    if (typeof callback === 'function') callback(err);\n  }\n}\n\n/**\n * Handles a `Sender` error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error\n * @param {Function} [cb] The first pending callback\n * @private\n */\nfunction onError(sender, err, cb) {\n  callCallbacks(sender, err, cb);\n  sender.onerror(err);\n}\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\nconst { hasBlob } = require('./constants');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines whether a value is a `Blob`.\n *\n * @param {*} value The value to be tested\n * @return {Boolean} `true` if `value` is a `Blob`, else `false`\n * @private\n */\nfunction isBlob(value) {\n  return (\n    hasBlob &&\n    typeof value === 'object' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    (value[Symbol.toStringTag] === 'Blob' ||\n      value[Symbol.toStringTag] === 'File')\n  );\n}\n\nmodule.exports = {\n  isBlob,\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst { Duplex } = require('stream');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      allowSynchronousEvents: true,\n      autoPong: true,\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const upgrade = req.headers.upgrade;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (key === undefined || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null, undefined, this.options);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Duplex, Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst { isBlob } = require('./validation');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._errorEmitted = false;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._autoPong = options.autoPong;\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * For historical reasons, the custom \"nodebuffer\" type is used by the default\n   * instead of \"blob\".\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      allowSynchronousEvents: options.allowSynchronousEvents,\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    const sender = new Sender(socket, this._extensions, options.generateMask);\n\n    this._receiver = receiver;\n    this._sender = sender;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    sender[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    sender.onerror = senderOnError;\n\n    //\n    // These methods may not be available if `socket` is just a `Duplex`.\n    //\n    if (socket.setTimeout) socket.setTimeout(0);\n    if (socket.setNoDelay) socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    setCloseTimer(this);\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n *     times in the same tick\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n *     automatically send a pong in response to a ping\n * @param {Function} [options.finishRequest] A function which can be used to\n *     customize the headers of each http request before it is sent\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    allowSynchronousEvents: true,\n    autoPong: true,\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  websocket._autoPong = opts.autoPong;\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n  }\n\n  if (parsedUrl.protocol === 'http:') {\n    parsedUrl.protocol = 'ws:';\n  } else if (parsedUrl.protocol === 'https:') {\n    parsedUrl.protocol = 'wss:';\n  }\n\n  websocket._url = parsedUrl.href;\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\n      '\"http:\", \"https\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection =\n    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n          ? false\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const upgrade = res.headers.upgrade;\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      allowSynchronousEvents: opts.allowSynchronousEvents,\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  //\n  // The following assignment is practically useless and is done only for\n  // consistency.\n  //\n  websocket._errorEmitted = true;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = isBlob(data) ? data.size : toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The `Sender` error event handler.\n *\n * @param {Error} The error\n * @private\n */\nfunction senderOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket.readyState === WebSocket.CLOSED) return;\n  if (websocket.readyState === WebSocket.OPEN) {\n    websocket._readyState = WebSocket.CLOSING;\n    setCloseTimer(websocket);\n  }\n\n  //\n  // `socket.end()` is used instead of `socket.destroy()` to allow the other\n  // peer to finish sending queued data. There is no need to set a timer here\n  // because `CLOSING` means that it is already set or not needed.\n  //\n  this._socket.end();\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * Set a timer to destroy the underlying raw socket of a WebSocket.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @private\n */\nfunction setCloseTimer(websocket) {\n  websocket._closeTimer = setTimeout(\n    websocket._socket.destroy.bind(websocket._socket),\n    closeTimeout\n  );\n}\n\n/**\n * The listener of the socket `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the socket `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the socket `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the socket `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"worker_threads\");","module.exports = require(\"zlib\");","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n// Mediocre shim\nvar Worker;\nvar workerAdd = \";var __w=require('worker_threads');__w.parentPort.on('message',function(m){onmessage({data:m})}),postMessage=function(m,t){__w.parentPort.postMessage(m,t)},close=process.exit;self=global\";\ntry {\n    Worker = require('worker_threads').Worker;\n}\ncatch (e) {\n}\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = Worker ? function (c, _, msg, transfer, cb) {\n    var done = false;\n    var w = new Worker(c + workerAdd, { eval: true })\n        .on('error', function (e) { return cb(e, null); })\n        .on('message', function (m) { return cb(null, m); })\n        .on('exit', function (c) {\n        if (c && !done)\n            cb(new Error('exited with code ' + c), null);\n    });\n    w.postMessage(msg, transfer);\n    w.terminate = function () {\n        done = true;\n        return Worker.prototype.terminate.call(w);\n    };\n    return w;\n} : function (_, __, ___, ____, cb) {\n    setImmediate(function () { return cb(new Error('async operations unsupported - update to Node 12+ (or Node 10-11 with the --experimental-worker CLI flag)'), null); });\n    var NOP = function () { };\n    return {\n        terminate: NOP,\n        postMessage: NOP\n    };\n};\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5237);\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","uint8ArrayToString","format","undefined","uint8DataArray","result","toLowerCase","padStart","hexStringToUint8Array","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","index","isNoExport","SHARE_PREFIX","shareGroup","groupIndex","isShare","LEVEL_DELIMETER_LEN","indexOf","substring","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","ofStrings","strings","ofNumbers","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","newInterval","interval","onInterval","timerRef","setInterval","clearInterval","newTimeout","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","global","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","FAILED","REJECTED","isCapable","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","g","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","hasAutoAckSupport","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","version","setVersion","traceId","setTraceId","spanId","setSpanId","isSampled","setSampled","traceState","setTraceState","fromTraceContext","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1","DataView","getUint8","traceId16Bytes","spanId8Bytes","traceStateLengthBytes","traceStateLength","getUint16","traceStateBytes","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","doesConsumerSupportOutcome","isSettled","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","f","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","createFromSpec","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","zlib","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","constants","Z_FINISH","encodedContainer","deflateSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","protocol","prtcl","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","validatePropsSupportedByTransport","transportProtocol","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","useSsl","regex","arrayLength","currententry","matchUrl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","NodeSslConstants","DEFAULT_CIPHER_SUITES","SessionPropertiesBase","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","sslExcludedProtocols","_sslExcludedProtocols","sslCipherSuites","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","sslTrustStores","_sslTrustStores","sslTrustedCommonNameList","_sslTrustedCNList","_sslPfx","sslPfxPassword","_sslPfxPasswd","_sslPrivateKey","sslPrivateKeyPassword","_sslPrivateKeyPasswd","_sslCertificate","sslProtocol","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","_payloadCompressionLevel","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","now","sequenceNumber","noSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","endsWith","inflatedAttachment","inflateSync","newCE","trimRight","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","adaptMessageToSmf_nonPayload","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","FIVE","delmode","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","tsFile","readFileSync","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","Z_SYNC_FLUSH","_eventCB","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","browserSupportsStreamingResponse","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","xhrBinary","streaming","WebSocketTransportSession","browserSupportsBinaryWebSockets","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","http","https","MyWebSocket","WebSocket","createWebSocketOptions","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","adaptURL","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","regExpOptions","ignoreCase","multiline","clonePrototype","emptyCloneFunc","NODE_OS_TYPES","Darwin","Windows_NT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","isMember","memberOf","objectValues","isNumberOrNull","isRangeCompare","isStringOrNull","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","_mask","mask","_unmask","totalLength","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","configurations","offers","extensionName","paramName","mustUnescape","isEscaping","inQuotes","SyntaxError","token","kDone","kRun","concurrency","jobs","job","Limiter","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","deflateOnData","inflateOnData","_maxPayload","RangeError","inflateOnError","_inflate","isServer","maxPayload","_options","_threshold","threshold","_isServer","_deflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","_readableState","endEmitted","zlibDeflateOptions","Writable","PerMessageDeflate","isValidStatusCode","isValidUTF8","_allowSynchronousEvents","allowSynchronousEvents","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_errored","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","createError","compressed","haveLength","controlMessage","fragments","setImmediate","ErrorCtor","statusCode","errorCode","randomFillSync","isBlob","applyMask","kByteLength","maskBuffer","RANDOM_POOL_SIZE","randomPool","randomPoolPointer","generateMask","_generateMask","_maskBuffer","_firstFragment","frame","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","ping","getBlobData","pong","perMessageDeflate","binary","blob","arrayBuffer","destroyed","nextTick","callCallbacks","dequeue","Reflect","cork","uncork","sender","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","called","_final","isPaused","protocols","isUtf8","_isValidUTF8","toStringTag","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","server","socketOnError","abortHandshake","headers","STATUS_CODES","Connection","abortHandshakeOrEmitwsClientError","autoPong","handleProtocols","clientTracking","verifyClient","noServer","backlog","_server","createServer","res","body","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","method","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","update","digest","_protocol","setSocket","randomBytes","Readable","URL","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_errorEmitted","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","_autoPong","bufferedAmount","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","senderOnError","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","CLOSING","errorEmitted","setCloseTimer","_req","sendAfterClose","needDrain","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","pathname","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","property","require","Worker","node_worker_1","transfer","w","eval","postMessage","__","___","____","NOP","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","l","co","le","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","o","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","sym","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","ll","flen","ftlen","dtlen","llm","lcts","it","clct","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","lastIndexOf","st_1","spInd","ch","wrkr","fns","td_1","cbfs","bInflt","pbf","gopt","bDflt","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","astrm","strm","ondata","astrmify","ext","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","newBuf","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","gzip","gzipSync","AsyncCompress","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlibSync","Unzlib","AsyncUnzlib","unzlib","unzlibSync","Decompress","G","I","Z","_this_2","AsyncDecompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","off","exfl","wzh","u","extra","col","exl","flag","compression","y","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","d_1","sc_1","su_1","fn_1","file_1","ctr","chks_4","originalSize","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}