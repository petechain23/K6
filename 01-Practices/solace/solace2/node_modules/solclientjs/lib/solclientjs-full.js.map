{"version":3,"file":"solclient-full.js","mappings":";;;;YAEAA,OAAOC,UAAU,oBAAjB;;;YCFA,MAAQC,SAAW,oBAAQ,2CAAc,EAA1B;YACf,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;YACb,MAAQC,UAAY,oBAAQ,4CAAe,EAA3B;YAChB,MAAQC,MAAQ,oBAAQ,wCAAW,EAAvB;YACZ,MAAQC,OAAS,oBAAQ,yCAAY,EAAxB;YAEbN,OAAOC,QAAQC,SAASA;YACxBF,OAAOC,QAAQE,OAAOA;YACtBH,OAAOC,QAAQG,UAAUA;YACzBJ,OAAOC,QAAQI,MAAMA;YACrBL,OAAOC,QAAQK,OAAOA;;;YCAtB,MAAMC,UAAU;YAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,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","sources":["webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-message-tracing/api.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/baggage.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-message/lib/message-outcomes.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-session/lib/provision-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/external node-commonjs \"worker_threads\"","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./node_modules/fflate/lib/node.cjs","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const fs = require('fs');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    // default to allow all version of SSL during negotiation but exclude SSLv2 and SSLv3\n    options['secureProtocol'] = 'SSLv23_method';\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.sslCipherSuites) {\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = trimmed.join(':');\n    } else {\n      options['ciphers'] = props.sslCipherSuites;\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","'use strict';\n\nconst BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\nconst hasBlob = typeof Blob !== 'undefined';\n\nif (hasBlob) BINARY_TYPES.push('blob');\n\nmodule.exports = {\n  BINARY_TYPES,\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  hasBlob,\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\nconst DEFER_EVENT = 6;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._allowSynchronousEvents =\n      options.allowSynchronousEvents !== undefined\n        ? options.allowSynchronousEvents\n        : true;\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._errored = false;\n    this._loop = false;\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64(cb);\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData(cb);\n          break;\n        case INFLATING:\n        case DEFER_EVENT:\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    if (!this._errored) cb();\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getInfo(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      const error = this.createError(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n\n      cb(error);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      const error = this.createError(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (!this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        const error = this.createError(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        const error = this.createError(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    } else {\n      const error = this.createError(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        const error = this.createError(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n\n        cb(error);\n        return;\n      }\n    } else if (this._masked) {\n      const error = this.createError(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength16(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength64(cb) {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      const error = this.createError(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  haveLength(cb) {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        const error = this.createError(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data, cb);\n      return;\n    }\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    this.dataMessage(cb);\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(\n            RangeError,\n            'Max payload size exceeded',\n            false,\n            1009,\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._fragments.push(buf);\n      }\n\n      this.dataMessage(cb);\n      if (this._state === GET_INFO) this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  dataMessage(cb) {\n    if (!this._fin) {\n      this._state = GET_INFO;\n      return;\n    }\n\n    const messageLength = this._messageLength;\n    const fragments = this._fragments;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragmented = 0;\n    this._fragments = [];\n\n    if (this._opcode === 2) {\n      let data;\n\n      if (this._binaryType === 'nodebuffer') {\n        data = concat(fragments, messageLength);\n      } else if (this._binaryType === 'arraybuffer') {\n        data = toArrayBuffer(concat(fragments, messageLength));\n      } else if (this._binaryType === 'blob') {\n        data = new Blob(fragments);\n      } else {\n        data = fragments;\n      }\n\n      if (this._allowSynchronousEvents) {\n        this.emit('message', data, true);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    } else {\n      const buf = concat(fragments, messageLength);\n\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n        const error = this.createError(\n          Error,\n          'invalid UTF-8 sequence',\n          true,\n          1007,\n          'WS_ERR_INVALID_UTF8'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', buf, false);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data, cb) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          const error = this.createError(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n\n          cb(error);\n          return;\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._loop = false;\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n\n      this._state = GET_INFO;\n      return;\n    }\n\n    if (this._allowSynchronousEvents) {\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n      this._state = GET_INFO;\n    } else {\n      this._state = DEFER_EVENT;\n      setImmediate(() => {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n        this.startLoop(cb);\n      });\n    }\n  }\n\n  /**\n   * Builds an error object.\n   *\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n   * @param {String} message The error message\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n   *     `message`\n   * @param {Number} statusCode The status code\n   * @param {String} errorCode The exposed error code\n   * @return {(Error|RangeError)} The error\n   * @private\n   */\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n    this._loop = false;\n    this._errored = true;\n\n    const err = new ErrorCtor(\n      prefix ? `Invalid WebSocket frame: ${message}` : message\n    );\n\n    Error.captureStackTrace(err, this.createError);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n  }\n}\n\nmodule.exports = Receiver;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n'use strict';\n\nconst { Duplex } = require('stream');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER, kWebSocket, NOOP } = require('./constants');\nconst { isBlob, isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\nconst RANDOM_POOL_SIZE = 8 * 1024;\nlet randomPool;\nlet randomPoolPointer = RANDOM_POOL_SIZE;\n\nconst DEFAULT = 0;\nconst DEFLATING = 1;\nconst GET_BLOB_DATA = 2;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {Duplex} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._queue = [];\n    this._state = DEFAULT;\n    this.onerror = NOOP;\n    this[kWebSocket] = undefined;\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        if (randomPoolPointer === RANDOM_POOL_SIZE) {\n          /* istanbul ignore else  */\n          if (randomPool === undefined) {\n            //\n            // This is lazily initialized because server-sent frames must not\n            // be masked so it may never be used.\n            //\n            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n          }\n\n          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n          randomPoolPointer = 0;\n        }\n\n        mask[0] = randomPool[randomPoolPointer++];\n        mask[1] = randomPool[randomPoolPointer++];\n        mask[2] = randomPool[randomPoolPointer++];\n        mask[3] = randomPool[randomPoolPointer++];\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    const opts = {\n      [kByteLength]: byteLength,\n      fin: options.fin,\n      generateMask: this._generateMask,\n      mask: options.mask,\n      maskBuffer: this._maskBuffer,\n      opcode,\n      readOnly,\n      rsv1\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\n      } else {\n        this.getBlobData(data, this._compress, opts, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n    } else {\n      this.dispatch(data, this._compress, opts, cb);\n    }\n  }\n\n  /**\n   * Gets the contents of a blob as binary data.\n   *\n   * @param {Blob} blob The blob\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     the data\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  getBlobData(blob, compress, options, cb) {\n    this._bufferedBytes += options[kByteLength];\n    this._state = GET_BLOB_DATA;\n\n    blob\n      .arrayBuffer()\n      .then((arrayBuffer) => {\n        if (this._socket.destroyed) {\n          const err = new Error(\n            'The socket was closed while the blob was being read'\n          );\n\n          //\n          // `callCallbacks` is called in the next tick to ensure that errors\n          // that might be thrown in the callbacks behave like errors thrown\n          // outside the promise chain.\n          //\n          process.nextTick(callCallbacks, this, err, cb);\n          return;\n        }\n\n        this._bufferedBytes -= options[kByteLength];\n        const data = toBuffer(arrayBuffer);\n\n        if (!compress) {\n          this._state = DEFAULT;\n          this.sendFrame(Sender.frame(data, options), cb);\n          this.dequeue();\n        } else {\n          this.dispatch(data, compress, options, cb);\n        }\n      })\n      .catch((err) => {\n        //\n        // `onError` is called in the next tick for the same reason that\n        // `callCallbacks` above is.\n        //\n        process.nextTick(onError, this, err, cb);\n      });\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._state = DEFLATING;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        callCallbacks(this, err, cb);\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._state = DEFAULT;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (this._state === DEFAULT && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Calls queued callbacks with an error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error to call the callbacks with\n * @param {Function} [cb] The first callback\n * @private\n */\nfunction callCallbacks(sender, err, cb) {\n  if (typeof cb === 'function') cb(err);\n\n  for (let i = 0; i < sender._queue.length; i++) {\n    const params = sender._queue[i];\n    const callback = params[params.length - 1];\n\n    if (typeof callback === 'function') callback(err);\n  }\n}\n\n/**\n * Handles a `Sender` error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error\n * @param {Function} [cb] The first pending callback\n * @private\n */\nfunction onError(sender, err, cb) {\n  callCallbacks(sender, err, cb);\n  sender.onerror(err);\n}\n","'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\nconst { hasBlob } = require('./constants');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines whether a value is a `Blob`.\n *\n * @param {*} value The value to be tested\n * @return {Boolean} `true` if `value` is a `Blob`, else `false`\n * @private\n */\nfunction isBlob(value) {\n  return (\n    hasBlob &&\n    typeof value === 'object' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    (value[Symbol.toStringTag] === 'Blob' ||\n      value[Symbol.toStringTag] === 'File')\n  );\n}\n\nmodule.exports = {\n  isBlob,\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst { Duplex } = require('stream');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      allowSynchronousEvents: true,\n      autoPong: true,\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const upgrade = req.headers.upgrade;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (key === undefined || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null, undefined, this.options);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Duplex, Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst { isBlob } = require('./validation');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._errorEmitted = false;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._autoPong = options.autoPong;\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * For historical reasons, the custom \"nodebuffer\" type is used by the default\n   * instead of \"blob\".\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      allowSynchronousEvents: options.allowSynchronousEvents,\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    const sender = new Sender(socket, this._extensions, options.generateMask);\n\n    this._receiver = receiver;\n    this._sender = sender;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    sender[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    sender.onerror = senderOnError;\n\n    //\n    // These methods may not be available if `socket` is just a `Duplex`.\n    //\n    if (socket.setTimeout) socket.setTimeout(0);\n    if (socket.setNoDelay) socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    setCloseTimer(this);\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n *     times in the same tick\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n *     automatically send a pong in response to a ping\n * @param {Function} [options.finishRequest] A function which can be used to\n *     customize the headers of each http request before it is sent\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    allowSynchronousEvents: true,\n    autoPong: true,\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  websocket._autoPong = opts.autoPong;\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n  }\n\n  if (parsedUrl.protocol === 'http:') {\n    parsedUrl.protocol = 'ws:';\n  } else if (parsedUrl.protocol === 'https:') {\n    parsedUrl.protocol = 'wss:';\n  }\n\n  websocket._url = parsedUrl.href;\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\n      '\"http:\", \"https\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection =\n    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n          ? false\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const upgrade = res.headers.upgrade;\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      allowSynchronousEvents: opts.allowSynchronousEvents,\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  //\n  // The following assignment is practically useless and is done only for\n  // consistency.\n  //\n  websocket._errorEmitted = true;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = isBlob(data) ? data.size : toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The `Sender` error event handler.\n *\n * @param {Error} The error\n * @private\n */\nfunction senderOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket.readyState === WebSocket.CLOSED) return;\n  if (websocket.readyState === WebSocket.OPEN) {\n    websocket._readyState = WebSocket.CLOSING;\n    setCloseTimer(websocket);\n  }\n\n  //\n  // `socket.end()` is used instead of `socket.destroy()` to allow the other\n  // peer to finish sending queued data. There is no need to set a timer here\n  // because `CLOSING` means that it is already set or not needed.\n  //\n  this._socket.end();\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * Set a timer to destroy the underlying raw socket of a WebSocket.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @private\n */\nfunction setCloseTimer(websocket) {\n  websocket._closeTimer = setTimeout(\n    websocket._socket.destroy.bind(websocket._socket),\n    closeTimeout\n  );\n}\n\n/**\n * The listener of the socket `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the socket `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the socket `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the socket `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","module.exports = require(\"bufferutil\");","module.exports = require(\"utf-8-validate\");","module.exports = require(\"buffer\");","module.exports = require(\"constants\");","module.exports = require(\"crypto\");","module.exports = require(\"dns\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"worker_threads\");","module.exports = require(\"zlib\");","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n// Mediocre shim\nvar Worker;\nvar workerAdd = \";var __w=require('worker_threads');__w.parentPort.on('message',function(m){onmessage({data:m})}),postMessage=function(m,t){__w.parentPort.postMessage(m,t)},close=process.exit;self=global\";\ntry {\n    Worker = require('worker_threads').Worker;\n}\ncatch (e) {\n}\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = Worker ? function (c, _, msg, transfer, cb) {\n    var done = false;\n    var w = new Worker(c + workerAdd, { eval: true })\n        .on('error', function (e) { return cb(e, null); })\n        .on('message', function (m) { return cb(null, m); })\n        .on('exit', function (c) {\n        if (c && !done)\n            cb(new Error('exited with code ' + c), null);\n    });\n    w.postMessage(msg, transfer);\n    w.terminate = function () {\n        done = true;\n        return Worker.prototype.terminate.call(w);\n    };\n    return w;\n} : function (_, __, ___, ____, cb) {\n    setImmediate(function () { return cb(new Error('async operations unsupported - update to Node 12+ (or Node 10-11 with the --experimental-worker CLI flag)'), null); });\n    var NOP = function () { };\n    return {\n        terminate: NOP,\n        postMessage: NOP\n    };\n};\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["module","exports","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","uint8ArrayToString","format","undefined","dataLength","byteLength","uint8DataArray","Uint8Array","result","toLowerCase","padStart","stringToUint8Array","arrayBuf","ArrayBuffer","uint8Array","hexStringToUint8Array","arrayBufferToString","ab","len","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","this","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","global","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","root","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","isNackRequired","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","dupAckRanges","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","rangeOutcome","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","g","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Codec","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1DataView","DataView","byte1","getUint8","version","isSampled","traceId16Bytes","traceId","TRACE_ID_BYTES_LENGTH","spanId8Bytes","spanId","SPAN_ID_BYTES_LENGTH","traceStateLengthBytes","traceStateLengthDataView","traceStateLength","getUint16","traceStateBytes","traceState","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","getTruncatedTraceState","_standardTraceStateTruncation","MAX_TRACE_STATE_LENGTH","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","newExpectedLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","clearExtendedVarLenParameters","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","canAck","hasAutoAckSupport","doesConsumerSupportOutcome","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","dns","dnsLookupPromise","url","Promise","host","hostname","lookup","address","resolved","code","errno","syscall","urls","cb","promises","all","then","catch","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","zlib","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","constants","Z_FINISH","encodedContainer","deflateSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","SessionPropertiesLib","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valSslExcludedProtocols","supported","SUPPORTED_SSL_PROTOCOLS","prtcl","protocol","valSslCipherSuites","string","empty","ciphers","SUPPORTED_CIPHER_SUITES","cipher","valSslTrustedCommonNameList","valUrlList","valArray","included","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","arrayLength","currententry","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","idToken","accessToken","WS_BINARY","sslValidateCertificate","sslPfxSet","sslPfx","sslPrivateKeySet","sslPrivateKey","sslCertSet","sslCertificate","allTcp","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","NodeSslConstants","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","_payloadCompressionLevel","DEFAULT_CIPHER_SUITES","SessionPropertiesNode","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_sslExcludedProtocols","_sslCipherSuites","_sslValidateCert","env","NODE_TLS_REJECT_UNAUTHORIZED","_sslTrustStores","_sslTrustedCNList","_sslPfx","_sslPfxPasswd","_sslPrivateKey","_sslPrivateKeyPasswd","_sslCertificate","_sslProtocol","_compressionLevel","_sslConnectionDowngradeTo","_lendsInspect","sslExcludedProtocols","sslCipherSuites","sslTrustStores","sslTrustedCommonNameList","sslPfxPassword","sslPrivateKeyPassword","sslProtocol","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","SslProtocolExcludeConstantMap","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","fromTraceContext","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","endsWith","inflatedAttachment","inflateSync","newCE","trimRight","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","FIVE","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","_props","valid","cn","createTLSOptions","constMap","trimmed","tsContents","readFileSync","tsFile","CompressedTransport","TcpRawTransport","TcpTlsTransport","TlsOnlyTransport","Duplex","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","noPause","pause","eventCB","onConnect","onError","onClose","onDrain","resendBuffer","forceFailure","setNoDelay","arg","shunted","TransportBase","TransportSessionEvent","TransportSessionState","client","_clientstats","_waitForSocketDrain","_waitForCompressorDrain","_flushCallback","_socketDrained","_compressorDrained","_state","_socketError","_transportSession","_compressor","_decompressor","setClientStats","setUnderlyingTransport","newUnderlyingTransoprt","WAITING_FOR_DESTROY","write","onData","_client","onErrorStage2","_eventCB","Z_SYNC_FLUSH","onZlibError","_destroy","CONNECTION_FAILED","stage2destroy","onOpen","WAITING_FOR_CREATE","highWaterMark","createDeflateRaw","createInflateRaw","sendCompressed","onCompressorDrain","onerrorStub","unpipe","_hadError","close","flushStage2","resume","prevCallback","net","TransportClientStats","_canSendNeeded","_drained","_rawSocket","rehome","parseHostPort","urlString","port","urlParsed","_ssl","originalSocket","hadError","errorMsg","Socket","bufferSize","tls","_tlsSocket","tlsOptions","socket","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdown","tlsShutdownStage2","transportProps","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","WebTransport","getId","compressingLayer","plaintextTransport","tlsLayer","uncompressedTransport","encryptedTransport","compress","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","transportContentType","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_queuedDataSize","initPreformattedHeaders","sendQueuedData","getQueuedDataToSend","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_lastDowngradeSucceeded","_socket","_sender","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","http","https","globalContext","MyWebSocket","WebSocket","msgBuf","wasClean","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","createWebSocketOptions","ondrain","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","createConnection","opts","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","_instanceof","nativeMap","nativeSet","nativePromise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","emptyCloneFunc","__objToStr","regExpOptions","ignoreCase","multiline","NODE_OS_TYPES","Darwin","Windows_NT","DEFAULT","NODE_PROCESS","os","ostype","osname","nodeVersionStr","release","arch","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","createWebSocketStream","Server","Receiver","Sender","WebSocketServer","EMPTY_BUFFER","FastBuffer","Symbol","species","totalLength","_mask","mask","_unmask","toArrayBuffer","toBuffer","readOnly","isView","unmask","WS_NO_BUFFER_UTIL","bufferUtil","BINARY_TYPES","alloc","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","kCode","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","CloseEvent","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","removeEventListener","thisArg","tokenChars","offers","mustUnescape","isEscaping","inQuotes","extensionName","paramName","SyntaxError","token","configurations","kDone","kRun","Limiter","concurrency","jobs","job","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","PerMessageDeflate","isServer","maxPayload","_maxPayload","_options","_threshold","threshold","_isServer","_deflate","_inflate","concurrencyLimit","offer","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","accept","normalizeParams","acceptAsServer","acceptAsClient","cleanup","accepted","num","isInteger","TypeError","decompress","fin","_decompress","_compress","windowBits","Z_DEFAULT_WINDOWBITS","zlibInflateOptions","inflateOnError","inflateOnData","_readableState","endEmitted","zlibDeflateOptions","deflateOnData","RangeError","Writable","isValidStatusCode","isValidUTF8","GET_INFO","GET_PAYLOAD_LENGTH_16","GET_PAYLOAD_LENGTH_64","GET_MASK","GET_DATA","INFLATING","DEFER_EVENT","_allowSynchronousEvents","allowSynchronousEvents","_binaryType","_extensions","_skipUTF8Validation","skipUTF8Validation","_bufferedBytes","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_errored","_loop","startLoop","consume","dst","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","createError","compressed","haveLength","controlMessage","perMessageDeflate","fragments","setImmediate","ErrorCtor","statusCode","errorCode","randomFillSync","isBlob","applyMask","kByteLength","maskBuffer","RANDOM_POOL_SIZE","randomPool","randomPoolPointer","DEFLATING","GET_BLOB_DATA","generateMask","_generateMask","_maskBuffer","_firstFragment","merge","skipMasking","opcode","rsv1","writeUInt16BE","writeUIntBE","enqueue","sendFrame","frame","ping","getBlobData","pong","binary","blob","arrayBuffer","destroyed","nextTick","callCallbacks","dequeue","Reflect","cork","uncork","sender","emitClose","duplexOnEnd","_writableState","finished","duplexOnError","ws","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","CLOSED","called","_final","isPaused","isUtf8","_isValidUTF8","toStringTag","WS_NO_UTF_8_VALIDATE","createHash","subprotocol","keyRegex","RUNNING","CLOSING","autoPong","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","_server","createServer","res","body","STATUS_CODES","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","upgrade","head","handleUpgrade","clients","_shouldEmitClose","shouldHandle","pathname","socketOnError","headers","method","abortHandshakeOrEmitwsClientError","abortHandshake","secWebSocketProtocol","secWebSocketExtensions","secure","authorized","encrypted","verified","completeUpgrade","readable","digest","update","_protocol","setSocket","Connection","randomBytes","URL","closeTimeout","kAborted","protocolVersions","readyStates","subprotocolRegex","_closeCode","_closeMessage","_closeTimer","_errorEmitted","_paused","_readyState","_receiver","_bufferedAmount","_redirects","initAsClient","_autoPong","receiver","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","senderOnError","unshift","socketOnClose","socketOnData","socketOnEnd","OPEN","_req","errorEmitted","setCloseTimer","sendAfterClose","needDrain","property","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","parsedUrl","isSecure","isIpcUrl","invalidUrlMessage","hash","emitErrorAndClose","defaultPort","protocolSet","tlsConnect","netConnect","Upgrade","search","handshakeTimeout","Origin","username","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","isSameHost","authorization","cookie","addr","serverProt","protError","extensionNames","finishRequest","servername","isIP","setHeader","receiverOnFinish","read","require","Worker","workerAdd","node_worker_1","transfer","w","eval","postMessage","__","___","____","NOP","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","l","le","co","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","o","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","sym","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","ll","llm","lcts","it","clct","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","lastIndexOf","st_1","spInd","ch","cbfs","wrkr","fns","td_1","bInflt","pbf","gopt","bDflt","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","astrm","strm","ondata","astrmify","ext","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","newBuf","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","AsyncCompress","gzip","gzipSync","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlibSync","Unzlib","AsyncUnzlib","unzlib","unzlibSync","Decompress","G","I","Z","_this_2","AsyncDecompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","off","exfl","wzh","u","extra","col","exl","flag","compression","y","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","sc_1","su_1","fn_1","d_1","file_1","ctr","chks_4","originalSize","state_1","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","__webpack_exports__"],"sourceRoot":""}