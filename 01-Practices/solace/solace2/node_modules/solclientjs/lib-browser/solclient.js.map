{"version":3,"file":"solclient.js","mappings":"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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message-tracing/api.js","webpack://solace/./modules/solclient-message-tracing/lib/baggage.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solace/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-outcomes.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/provision-event.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/clone.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/fflate/lib/browser.cjs","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5237);\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBlob","Blob","BufferEncoder","Buffer","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","uint8ArrayToString","format","undefined","uint8DataArray","result","toLowerCase","padStart","hexStringToUint8Array","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","EndpointNameComplaint","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","QUEUE_PREFIX","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","index","NOEXPORT_PREFIX","isNoExport","shareGroup","groupIndex","SHARE_PREFIX","isShare","LEVEL_DELIMETER_LEN","indexOf","substring","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","MAX_ENDPOINTS_EXCEEDED","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","ASSURED_DELIVERY_NOT_READY","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","ofStrings","strings","ofNumbers","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","newInterval","interval","onInterval","timerRef","setInterval","clearInterval","newTimeout","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","g","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","FAILED","REJECTED","isCapable","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","hasAutoAckSupport","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","version","setVersion","traceId","setTraceId","spanId","setSpanId","isSampled","setSampled","traceState","setTraceState","fromTraceContext","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1","DataView","getUint8","traceId16Bytes","spanId8Bytes","traceStateLengthBytes","traceStateLength","getUint16","traceStateBytes","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","getHttpContentType","fpHttpContentEncoding","getHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","_httpContentEncoding","setHttpContentEncoding","_httpContentType","setHttpContentType","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","doesConsumerSupportOutcome","isSettled","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","_getCompressedBinaryAttachment","_compressedBinaryAttachment","_setCompressedBinaryAttachment","_getPayloadCompressed","_payloadCompressed","_setPayloadCompressed","setTransportContext","validFlags","f","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","explainInvalidEndpointName","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","nameChecks","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","isTE","triplet","match","NONEXCLUSIVE","valTopicString","createFromSpec","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","ProvisionEvent","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","url","host","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCode","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","PROVISION_ERROR","PROVISION_OK","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","fflate","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","compressedAttachment","origSize","Z_FINISH","encodedContainer","textEncoded","zlibSync","_compressedCE","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","provisionEndpoint","queueDescriptior","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","force","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","useSsl","all","regex","arrayLength","currententry","string","matchUrl","SessionPropertiesValidator","transportProtocol","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","validatePropsSupportedByTransport","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","SessionPropertiesBase","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryInterval","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","_payloadCompressionLevel","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","WS_BINARY","xhrBinary","streaming","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","outcome","provisionEvent","browserProperties","destinationType","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","noSenderTimestamp","senderTimestamp","now","noSequenceNumber","sequenceNumber","noSenderId","senderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","paramLength","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","ce","ct","bag","ctx","_baggageObj","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","endsWith","inflatedAttachment","unzlibSync","newCE","trimRight","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","pm_queue_len","LIGHT_QUEUE_NAME_OFFSET","pm_queue_offset","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","pm_ad_ackimm","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","userData","adaptMessageToSmf_nonPayload","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","FIVE","delmode","lookup","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","forceFailure","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","precallback","tlsShutdown","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","browserSupportsStreamingResponse","xhr","check","onprogress","WebTransportSessionBase","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","navigator","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","errorMsg","_socket","_sender","WebSocketCloseCodes","MyWebSocket","WebSocket","adaptURL","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","bufferAllow","maxPayloadBytes","close","cancelQuery","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","_instanceof","nativeMap","nativeSet","nativePromise","Promise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","then","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","regExpOptions","global","ignoreCase","multiline","clonePrototype","emptyCloneFunc","WINDOWS_VERSION_MAP","BROWSER_PROCESS","safeEncode","browserAgentInfo","agentStr","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionTest","versionPart","versionMatch","getBrowserAgentInfo","arg","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","memberOf","objectValues","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","num","opts","seen","stylize","stylizeNoColor","colors","showHidden","isObject","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","isNull","hasOwn","prop","isRegExp","re","objectToString","isError","isDate","o","formatError","recurseTimes","primitive","simple","JSON","stringify","formatPrimitive","visibleKeys","arrayToHash","braces","toUTCString","l","formatProperty","formatArray","prev","cur","reduceToSingleString","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","encodingOrOffset","TypeError","isEncoding","actual","write","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","poolSize","alloc","allocUnsafeSlow","_isBuffer","y","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","INVALID_BASE64_RE","leadSurrogate","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","ownKeys","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","handler","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","warning","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","addEventListener","wrapListener","removeEventListener","setMaxListeners","getMaxListeners","doError","er","listeners","originalListener","spliceOne","off","rawListeners","eventNames","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","ch2","node_worker_1","transfer","Worker","ed","$e$","postMessage","u16","i32","Int32Array","fleb","fdeb","clim","freb","eb","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","co","le","rvb","sv","r_1","flt","fdt","flm","flrm","fdm","fdrm","bits16","shft","slc","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","ind","nt","inflt","dat","st","dict","sl","dl","noBuf","resize","noSt","cbuf","bl","nbuf","bt","lm","dm","lbt","dbt","tbts","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","dt","lms","dms","lpos","dsym","dend","wbits","wbits16","hTree","t2","et","i0","i1","i2","maxSym","tr","mbt","lft","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","ll","flen","ftlen","dtlen","llm","lcts","it","clct","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","crct","crc","cr","adler","dopt","dictionary","newDat","mem","mrg","wcln","fnStr","td","ks","st_1","spInd","ch","wrkr","fns","td_1","cbfs","bInflt","inflateSync","pbf","gopt","bDflt","deflateSync","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","cbify","consume","astrm","strm","ondata","astrmify","b2","b4","b8","filename","mtime","flg","zs","lv","StrmOpt","Deflate","endLen","AsyncDeflate","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","gzip","gzipSync","AsyncCompress","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","gunzip","gunzipSync","Zlib","AsyncZlib","zlib","Unzlib","AsyncUnzlib","unzlib","Decompress","G","I","Z","_this_2","AsyncDecompress","decompress","decompressSync","fltn","op","te","TextEncoder","TextDecoder","tds","dutf8","DecodeUTF8","EncodeUTF8","strToU8","latin1","ar_1","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","exfl","wzh","extra","col","exl","flag","compression","exf","wzf","ZipPassThrough","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","zip","tot","slft","files","term","tAll","cbd","cbf","oe","cdl","badd","loc","_loop_1","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","d_1","sc_1","su_1","fn_1","file_1","ctr","chks_4","originalSize","register","queueMicrotask","unzip","ze","fltr","_loop_3","c_1","no","infl","unzipSync","c_2","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis"],"sourceRoot":""}